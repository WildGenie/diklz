// <auto-generated />
using System;
using App.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace App.Data.Migrations
{
    [DbContext(typeof(MigrationDbContext))]
    [Migration("20190627121101_v1.05")]
    partial class v105
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("App.Core.Data.Entities.ATU.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(128);

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<Guid>("RegionId")
                        .HasColumnName("region_id");

                    b.Property<string>("TypeEnum")
                        .HasColumnName("type_enum");

                    b.HasKey("Id")
                        .HasName("pk_atu_city");

                    b.HasIndex("RegionId")
                        .HasName("ix_atu_city_region_id");

                    b.HasIndex("Name", "Code")
                        .HasName("ix_atu_city_name_code");

                    b.ToTable("atu_city");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ATU.CityDistricts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CityId")
                        .HasColumnName("city_id");

                    b.Property<int>("Code")
                        .HasColumnName("code");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(128);

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_atu_city_districts");

                    b.HasIndex("CityId")
                        .HasName("ix_atu_city_districts_city_id");

                    b.ToTable("atu_city_districts");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ATU.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(64);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(200);

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_atu_country");

                    b.ToTable("atu_country");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ATU.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(64);

                    b.Property<Guid>("CountryId")
                        .HasColumnName("country_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("KOATUU")
                        .HasColumnName("koatuu")
                        .HasMaxLength(15);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(200);

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_atu_region");

                    b.HasIndex("CountryId")
                        .HasName("ix_atu_region_country_id");

                    b.HasIndex("ParentId")
                        .HasName("ix_atu_region_parent_id");

                    b.ToTable("atu_region");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ATU.Street", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CityId")
                        .HasColumnName("city_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_atu_street");

                    b.HasIndex("CityId")
                        .HasName("ix_atu_street_city_id");

                    b.ToTable("atu_street");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ATU.SubjectAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AddressType")
                        .HasColumnName("address_type");

                    b.Property<string>("Building")
                        .HasColumnName("building")
                        .HasMaxLength(300);

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("PostIndex")
                        .HasColumnName("post_index")
                        .HasMaxLength(20);

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<Guid>("StreetId")
                        .HasColumnName("street_id");

                    b.Property<Guid>("SubjectId")
                        .HasColumnName("subject_id");

                    b.HasKey("Id")
                        .HasName("pk_atu_subject_address");

                    b.ToTable("atu_subject_address");
                });

            modelBuilder.Entity("App.Core.Data.Entities.CDN.EmployeeSpeciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsMainSpeciality")
                        .HasColumnName("is_main_speciality");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnName("speciality_id");

                    b.HasKey("Id")
                        .HasName("pk_cdn_employee_speciality");

                    b.HasIndex("EmployeeId")
                        .HasName("ix_cdn_employee_speciality_employee_id");

                    b.HasIndex("SpecialityId")
                        .HasName("ix_cdn_employee_speciality_speciality_id");

                    b.ToTable("cdn_employee_speciality");
                });

            modelBuilder.Entity("App.Core.Data.Entities.CDN.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_cdn_position");

                    b.ToTable("cdn_position");
                });

            modelBuilder.Entity("App.Core.Data.Entities.CDN.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_cdn_speciality");

                    b.HasIndex("ParentId")
                        .HasName("ix_cdn_speciality_parent_id");

                    b.ToTable("cdn_speciality");
                });

            modelBuilder.Entity("App.Core.Data.Entities.Common.ApplicationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("is_enabled");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("Type")
                        .HasColumnName("type");

                    b.Property<string>("TypeName")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("pk_sys_application_setting");

                    b.ToTable("sys_application_setting");
                });

            modelBuilder.Entity("App.Core.Data.Entities.Common.ApplicationSettingValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationSettingId")
                        .HasColumnName("application_setting_id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_sys_application_setting_value");

                    b.HasIndex("ApplicationSettingId")
                        .HasName("ix_sys_application_setting_value_application_setting_id");

                    b.ToTable("sys_application_setting_value");
                });

            modelBuilder.Entity("App.Core.Data.Entities.Common.EntityExProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("EntityId")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("ExPropertyId")
                        .HasColumnName("ex_property_id");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<string>("ValueEx")
                        .HasColumnName("value_ex");

                    b.HasKey("Id")
                        .HasName("pk_entity_ex_property");

                    b.ToTable("entity_ex_property");
                });

            modelBuilder.Entity("App.Core.Data.Entities.Common.EnumRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("EnumType")
                        .HasColumnName("enum_type");

                    b.Property<string>("ExParam1")
                        .HasColumnName("ex_param1");

                    b.Property<string>("ExParam2")
                        .HasColumnName("ex_param2");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_enum_record");

                    b.HasIndex("EnumType", "Code")
                        .IsUnique()
                        .HasName("ix_enum_record_enum_type_code");

                    b.ToTable("enum_record");
                });

            modelBuilder.Entity("App.Core.Data.Entities.Common.ExProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("COTypeEnum")
                        .HasColumnName("cotype_enum");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Group")
                        .HasColumnName("group");

                    b.Property<string>("KindEnum")
                        .HasColumnName("kind_enum");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("PropTypeEnum")
                        .HasColumnName("prop_type_enum");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("SortOrder")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_ex_property");

                    b.ToTable("ex_property");
                });

            modelBuilder.Entity("App.Core.Data.Entities.Common.FileStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("ContentType")
                        .HasColumnName("content_type");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DocumentType")
                        .HasColumnName("document_type");

                    b.Property<Guid>("EntityId")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path");

                    b.Property<double>("FileSize")
                        .HasColumnName("file_size");

                    b.Property<int>("FileType")
                        .HasColumnName("file_type");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<bool>("Ock")
                        .HasColumnName("ock");

                    b.Property<string>("OrigFileName")
                        .HasColumnName("orig_file_name");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_file_store");

                    b.ToTable("file_store");
                });

            modelBuilder.Entity("App.Core.Data.Entities.Common.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("Birthday")
                        .HasColumnName("birthday");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(1024);

                    b.Property<string>("DocPrefix")
                        .HasColumnName("doc_prefix");

                    b.Property<DateTime?>("DocumentIssueDate")
                        .HasColumnName("document_issue_date");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnName("expiration_date");

                    b.Property<string>("GenderEnum")
                        .HasColumnName("gender_enum");

                    b.Property<string>("IPN")
                        .HasColumnName("ipn")
                        .HasMaxLength(50);

                    b.Property<string>("IdentityDocumentTypeEnum")
                        .HasColumnName("identity_document_type_enum")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(200);

                    b.Property<string>("Location")
                        .HasColumnName("location");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnName("middle_name")
                        .HasMaxLength(200);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<bool>("NoIPN")
                        .HasColumnName("no_ipn");

                    b.Property<string>("PersonalDocumentAuthority")
                        .HasColumnName("personal_document_authority")
                        .HasMaxLength(100);

                    b.Property<string>("PersonalDocumentNumber")
                        .HasColumnName("personal_document_number")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.Property<string>("Photo")
                        .HasColumnName("photo");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(200);

                    b.HasKey("Id")
                        .HasName("pk_person");

                    b.ToTable("person");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ORG.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("discriminator");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<Guid?>("OrgUnitPositionId")
                        .HasColumnName("org_unit_position_id");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_org_employee");

                    b.HasIndex("OrgUnitPositionId")
                        .HasName("ix_org_employee_org_unit_position_id");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_org_employee_organization_id");

                    b.HasIndex("PersonId")
                        .HasName("ix_org_employee_person_id");

                    b.ToTable("org_employee");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Employee");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ORG.OrgUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Category")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(20);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("DerivedClass")
                        .HasColumnName("derived_class");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("State")
                        .HasColumnName("state");

                    b.Property<Guid?>("SubjectAddressId")
                        .HasColumnName("subject_address_id");

                    b.HasKey("Id")
                        .HasName("pk_org_unit");

                    b.HasIndex("SubjectAddressId")
                        .HasName("ix_org_unit_subject_address_id");

                    b.ToTable("org_unit");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ORG.OrgUnitPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsResource")
                        .HasColumnName("is_resource");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("OrgUnitId")
                        .HasColumnName("org_unit_id");

                    b.Property<Guid>("PositionId")
                        .HasColumnName("position_id");

                    b.Property<string>("PositionType")
                        .HasColumnName("position_type");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_org_unit_position");

                    b.HasIndex("OrgUnitId")
                        .HasName("ix_org_unit_position_org_unit_id");

                    b.HasIndex("PositionId")
                        .HasName("ix_org_unit_position_position_id");

                    b.ToTable("org_unit_position");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ORG.OrgUnitPositionEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("OrgUnitPositionId")
                        .HasColumnName("org_unit_position_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_org_unit_position_employee");

                    b.HasIndex("EmployeeId")
                        .HasName("ix_org_unit_position_employee_employee_id");

                    b.HasIndex("OrgUnitPositionId")
                        .HasName("ix_org_unit_position_employee_org_unit_position_id");

                    b.ToTable("org_unit_position_employee");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ORG.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BaseClass")
                        .HasColumnName("base_class");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Category")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(20);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("discriminator");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name");

                    b.Property<string>("State")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_org_organization");

                    b.ToTable("org_organization");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Organization");
                });

            modelBuilder.Entity("App.Core.Security.Entities.ApplicationRowLevelRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_sec_application_row_level_right");

                    b.ToTable("sec_application_row_level_right");
                });

            modelBuilder.Entity("App.Core.Security.Entities.FieldRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessLevel")
                        .HasColumnName("access_level");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("FieldName")
                        .HasColumnName("field_name");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<Guid>("RightId")
                        .HasColumnName("right_id");

                    b.HasKey("Id")
                        .HasName("pk_sec_field_right");

                    b.HasIndex("RightId")
                        .HasName("ix_sec_field_right_right_id");

                    b.ToTable("sec_field_right");
                });

            modelBuilder.Entity("App.Core.Security.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_sec_profile");

                    b.ToTable("sec_profile");
                });

            modelBuilder.Entity("App.Core.Security.Entities.ProfileRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<Guid>("RightId")
                        .HasColumnName("right_id");

                    b.HasKey("Id")
                        .HasName("pk_sec_profile_right");

                    b.HasIndex("ProfileId")
                        .HasName("ix_sec_profile_right_profile_id");

                    b.HasIndex("RightId")
                        .HasName("ix_sec_profile_right_right_id");

                    b.ToTable("sec_profile_right");
                });

            modelBuilder.Entity("App.Core.Security.Entities.ProfileRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_sec_profile_role");

                    b.HasIndex("ProfileId")
                        .HasName("ix_sec_profile_role_profile_id");

                    b.HasIndex("RoleId")
                        .HasName("ix_sec_profile_role_role_id");

                    b.ToTable("sec_profile_role");
                });

            modelBuilder.Entity("App.Core.Security.Entities.Right", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<int>("EntityAccessLevel")
                        .HasColumnName("entity_access_level");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name")
                        .HasMaxLength(64);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_sec_right");

                    b.ToTable("sec_right");
                });

            modelBuilder.Entity("App.Core.Security.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_sec_role");

                    b.ToTable("sec_role");
                });

            modelBuilder.Entity("App.Core.Security.Entities.RoleRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<Guid>("RightId")
                        .HasColumnName("right_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_sec_role_right");

                    b.HasIndex("RightId")
                        .HasName("ix_sec_role_right_right_id");

                    b.HasIndex("RoleId")
                        .HasName("ix_sec_role_right_role_id");

                    b.ToTable("sec_role_right");
                });

            modelBuilder.Entity("App.Core.Security.Entities.RowLevelRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessType")
                        .HasColumnName("access_type");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_sec_row_level_right");

                    b.HasIndex("ProfileId")
                        .HasName("ix_sec_row_level_right_profile_id");

                    b.ToTable("sec_row_level_right");
                });

            modelBuilder.Entity("App.Core.Security.Entities.RowLevelSecurityObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("EntityId")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<Guid>("RowLevelRightId")
                        .HasColumnName("row_level_right_id");

                    b.HasKey("Id")
                        .HasName("pk_sec_row_level_security_object");

                    b.HasIndex("RowLevelRightId")
                        .HasName("ix_sec_row_level_security_object_row_level_right_id");

                    b.ToTable("sec_row_level_security_object");
                });

            modelBuilder.Entity("App.Core.Security.Entities.UserDefaultValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ValueId")
                        .HasColumnName("value_id");

                    b.HasKey("Id")
                        .HasName("pk_sec_user_default_value");

                    b.HasIndex("UserId")
                        .HasName("ix_sec_user_default_value_user_id");

                    b.ToTable("sec_user_default_value");
                });

            modelBuilder.Entity("App.Core.Security.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sec_user_profile");

                    b.HasIndex("ProfileId")
                        .HasName("ix_sec_user_profile_profile_id");

                    b.HasIndex("UserId")
                        .HasName("ix_sec_user_profile_user_id");

                    b.ToTable("sec_user_profile");
                });

            modelBuilder.Entity("App.Data.Models.APP.AppAssignee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<string>("ContactInformation")
                        .HasColumnName("contact_information")
                        .HasMaxLength(255);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("DateOfAppointment")
                        .HasColumnName("date_of_appointment");

                    b.Property<DateTime?>("DateOfContract")
                        .HasColumnName("date_of_contract");

                    b.Property<DateTime?>("DateOfGraduation")
                        .HasColumnName("date_of_graduation");

                    b.Property<string>("EducationInstitution")
                        .HasColumnName("education_institution")
                        .HasMaxLength(255);

                    b.Property<string>("IPN")
                        .HasColumnName("ipn")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsFromLicense")
                        .HasColumnName("is_from_license");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasMaxLength(200);

                    b.Property<Guid?>("LicenseAssigneeId")
                        .HasColumnName("license_assignee_id");

                    b.Property<bool?>("LicenseDeleteCheck")
                        .HasColumnName("license_delete_check");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name")
                        .HasMaxLength(200);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<string>("NameOfPosition")
                        .HasColumnName("name_of_position")
                        .HasMaxLength(100);

                    b.Property<string>("NumberOfContract")
                        .HasColumnName("number_of_contract")
                        .HasMaxLength(20);

                    b.Property<string>("NumberOfDiploma")
                        .HasColumnName("number_of_diploma")
                        .HasMaxLength(25);

                    b.Property<string>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasMaxLength(20);

                    b.Property<string>("OrgPositionType")
                        .HasColumnName("org_position_type")
                        .HasMaxLength(30);

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("Speciality")
                        .HasColumnName("speciality")
                        .HasMaxLength(200);

                    b.Property<string>("WorkExperience")
                        .HasColumnName("work_experience")
                        .HasMaxLength(5);

                    b.Property<string>("YearOfGraduation")
                        .HasColumnName("year_of_graduation")
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("pk_app_assignees");

                    b.HasIndex("LicenseAssigneeId")
                        .HasName("ix_app_assignees_license_assignee_id");

                    b.ToTable("app_assignees");
                });

            modelBuilder.Entity("App.Data.Models.APP.AppAssigneeBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnName("assignee_id");

                    b.Property<Guid>("BranchId")
                        .HasColumnName("branch_id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_app_assignee_branches");

                    b.HasIndex("AssigneeId")
                        .HasName("ix_app_assignee_branches_assignee_id");

                    b.HasIndex("BranchId")
                        .HasName("ix_app_assignee_branches_branch_id");

                    b.ToTable("app_assignee_branches");
                });

            modelBuilder.Entity("App.Data.Models.APP.AppDecision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AppId")
                        .HasColumnName("app_id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("DateOfStart")
                        .HasColumnName("date_of_start");

                    b.Property<string>("DecisionDescription")
                        .HasColumnName("decision_description");

                    b.Property<string>("DecisionType")
                        .HasColumnName("decision_type");

                    b.Property<bool>("IsClosed")
                        .HasColumnName("is_closed");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Notes")
                        .HasColumnName("notes");

                    b.Property<decimal>("PaidMoney")
                        .HasColumnName("paid_money");

                    b.Property<Guid?>("ProtocolId")
                        .HasColumnName("protocol_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_app_decisions");

                    b.HasAlternateKey("AppId")
                        .HasName("ak_app_decisions_app_id");

                    b.HasIndex("ProtocolId")
                        .HasName("ix_app_decisions_protocol_id");

                    b.ToTable("app_decisions");
                });

            modelBuilder.Entity("App.Data.Models.APP.AppDecisionReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AppDecisionId")
                        .HasColumnName("app_decision_id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("ReasonType")
                        .HasColumnName("reason_type");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_app_decision_reasons");

                    b.HasIndex("AppDecisionId")
                        .HasName("ix_app_decision_reasons_app_decision_id");

                    b.ToTable("app_decision_reasons");
                });

            modelBuilder.Entity("App.Data.Models.APP.AppLicenseMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AppId")
                        .HasColumnName("app_id");

                    b.Property<string>("AttachedFile")
                        .HasColumnName("attached_file");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("DateOfMessage")
                        .HasColumnName("date_of_message");

                    b.Property<string>("MessageNumber")
                        .IsRequired()
                        .HasColumnName("message_number");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<long>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<Guid>("Performer")
                        .HasColumnName("performer");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("SignedFullName")
                        .HasColumnName("signed_full_name");

                    b.Property<string>("SignedJobPosition")
                        .HasColumnName("signed_job_position");

                    b.Property<string>("State")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_app_license_messages");

                    b.HasAlternateKey("AppId", "MessageNumber")
                        .HasName("ak_app_license_messages_app_id_message_number");

                    b.ToTable("app_license_messages");
                });

            modelBuilder.Entity("App.Data.Models.APP.AppPreLicenseCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AppId")
                        .HasColumnName("app_id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CheckCreatedId")
                        .HasColumnName("check_created_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("CreationDateOfCheck")
                        .HasColumnName("creation_date_of_check");

                    b.Property<DateTime?>("EndDateOfCheck")
                        .HasColumnName("end_date_of_check");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<long?>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<int?>("ResultOfCheck")
                        .HasColumnName("result_of_check");

                    b.Property<DateTime>("ScheduledEndDate")
                        .HasColumnName("scheduled_end_date");

                    b.Property<DateTime>("ScheduledStartDate")
                        .HasColumnName("scheduled_start_date");

                    b.HasKey("Id")
                        .HasName("pk_app_pre_license_checks");

                    b.HasAlternateKey("AppId")
                        .HasName("ak_app_pre_license_checks_app_id");

                    b.ToTable("app_pre_license_checks");
                });

            modelBuilder.Entity("App.Data.Models.APP.AppProtocol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<DateTime?>("ProtocolDate")
                        .HasColumnName("protocol_date");

                    b.Property<string>("ProtocolNumber")
                        .HasColumnName("protocol_number");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<int>("StatusId")
                        .HasColumnName("status_id");

                    b.Property<string>("StatusName")
                        .HasColumnName("status_name");

                    b.HasKey("Id")
                        .HasName("pk_app_protocols");

                    b.ToTable("app_protocols");
                });

            modelBuilder.Entity("App.Data.Models.APP.ApplicationBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid?>("BranchId")
                        .HasColumnName("branch_id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("LimsDocumentId")
                        .HasColumnName("lims_document_id");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_application_branches");

                    b.HasIndex("BranchId")
                        .HasName("ix_application_branches_branch_id");

                    b.HasIndex("LimsDocumentId")
                        .HasName("ix_application_branches_lims_document_id");

                    b.ToTable("application_branches");
                });

            modelBuilder.Entity("App.Data.Models.DOC.BranchEDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("BranchId")
                        .HasColumnName("branch_id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("EDocumentId")
                        .HasColumnName("edocument_id");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_branch_edocuments");

                    b.HasIndex("BranchId")
                        .HasName("ix_branch_edocuments_branch_id");

                    b.HasIndex("EDocumentId")
                        .HasName("ix_branch_edocuments_edocument_id");

                    b.ToTable("branch_edocuments");
                });

            modelBuilder.Entity("App.Data.Models.DOS.EDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("CardNumber")
                        .HasColumnName("card_number")
                        .HasMaxLength(30);

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<string>("EDocumentStatus")
                        .HasColumnName("edocument_status")
                        .HasMaxLength(30);

                    b.Property<string>("EDocumentType")
                        .HasColumnName("edocument_type");

                    b.Property<Guid?>("EntityId")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name");

                    b.Property<bool?>("IsFromLicense")
                        .HasColumnName("is_from_license");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("Version")
                        .HasColumnName("version")
                        .HasMaxLength(30);

                    b.HasKey("Id")
                        .HasName("pk_edocuments");

                    b.ToTable("edocuments");
                });

            modelBuilder.Entity("App.Data.Models.FDB.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid?>("AppId")
                        .HasColumnName("app_id");

                    b.Property<string>("AppSort")
                        .HasColumnName("app_sort");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsRated")
                        .HasColumnName("is_rated");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<Guid?>("OrgEmployeeId")
                        .HasColumnName("org_employee_id");

                    b.Property<Guid?>("OrgId")
                        .HasColumnName("org_id");

                    b.Property<int>("Rating")
                        .HasColumnName("rating");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_feedbacks");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("App.Data.Models.IML.ImlApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid?>("AppDecisionId")
                        .HasColumnName("app_decision_id");

                    b.Property<string>("AppDecisionNotes")
                        .HasColumnName("app_decision_notes");

                    b.Property<Guid?>("AppLicenseMessageId")
                        .HasColumnName("app_license_message_id");

                    b.Property<Guid?>("AppPreLicenseCheckId")
                        .HasColumnName("app_pre_license_check_id");

                    b.Property<string>("AppSort")
                        .HasColumnName("app_sort")
                        .HasMaxLength(40);

                    b.Property<string>("AppState")
                        .HasColumnName("app_state")
                        .HasMaxLength(30);

                    b.Property<string>("AppType")
                        .HasColumnName("app_type")
                        .HasMaxLength(30);

                    b.Property<string>("BackOfficeAppState")
                        .HasColumnName("back_office_app_state")
                        .HasMaxLength(30);

                    b.Property<string>("BaseClass")
                        .HasColumnName("base_class");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Duns")
                        .HasColumnName("duns");

                    b.Property<string>("ErrorProcessingLicense")
                        .HasColumnName("error_processing_license");

                    b.Property<DateTime?>("ExpertiseDate")
                        .HasColumnName("expertise_date");

                    b.Property<string>("ExpertiseResult")
                        .HasColumnName("expertise_result");

                    b.Property<bool>("IsAgreeLicenseTerms")
                        .HasColumnName("is_agree_license_terms");

                    b.Property<bool>("IsAgreeProcessingData")
                        .HasColumnName("is_agree_processing_data");

                    b.Property<bool>("IsCheckMpd")
                        .HasColumnName("is_check_mpd");

                    b.Property<bool>("IsCourierDelivery")
                        .HasColumnName("is_courier_delivery");

                    b.Property<bool>("IsCourierResults")
                        .HasColumnName("is_courier_results");

                    b.Property<bool>("IsCreatedOnPortal")
                        .HasColumnName("is_created_on_portal");

                    b.Property<bool>("IsElectricFormResults")
                        .HasColumnName("is_electric_form_results");

                    b.Property<bool>("IsPaperLicense")
                        .HasColumnName("is_paper_license");

                    b.Property<bool>("IsPostDelivery")
                        .HasColumnName("is_post_delivery");

                    b.Property<bool>("IsPostResults")
                        .HasColumnName("is_post_results");

                    b.Property<bool>("IsProtectionFromAggressors")
                        .HasColumnName("is_protection_from_aggressors");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<long>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<Guid>("OrgUnitId")
                        .HasColumnName("org_unit_id");

                    b.Property<Guid>("OrganizationInfoId")
                        .HasColumnName("organization_info_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnName("performer_id");

                    b.Property<Guid?>("PerformerOfExpertise")
                        .HasColumnName("performer_of_expertise");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.HasKey("Id")
                        .HasName("pk_iml_applications");

                    b.HasIndex("AppDecisionId")
                        .HasName("ix_iml_applications_app_decision_id");

                    b.HasIndex("AppLicenseMessageId")
                        .HasName("ix_iml_applications_app_license_message_id");

                    b.HasIndex("AppPreLicenseCheckId")
                        .HasName("ix_iml_applications_app_pre_license_check_id");

                    b.HasIndex("OrgUnitId")
                        .HasName("ix_iml_applications_org_unit_id");

                    b.HasIndex("ParentId")
                        .HasName("ix_iml_applications_parent_id");

                    b.HasIndex("PerformerId")
                        .HasName("ix_iml_applications_performer_id");

                    b.ToTable("iml_applications");
                });

            modelBuilder.Entity("App.Data.Models.IML.ImlLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BaseClass")
                        .HasColumnName("base_class");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndOrderDate")
                        .HasColumnName("end_order_date");

                    b.Property<string>("EndOrderNumber")
                        .HasColumnName("end_order_number");

                    b.Property<string>("EndOrderText")
                        .HasColumnName("end_order_text");

                    b.Property<string>("EndReasonText")
                        .HasColumnName("end_reason_text");

                    b.Property<bool>("IsRelevant")
                        .HasColumnName("is_relevant");

                    b.Property<string>("LicSort")
                        .HasColumnName("lic_sort")
                        .HasMaxLength(40);

                    b.Property<string>("LicState")
                        .HasColumnName("lic_state")
                        .HasMaxLength(30);

                    b.Property<string>("LicType")
                        .HasColumnName("lic_type")
                        .HasMaxLength(30);

                    b.Property<string>("LicenseDate")
                        .HasColumnName("license_date");

                    b.Property<string>("LicenseNumber")
                        .HasColumnName("license_number");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<long>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<string>("OrderDate")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<Guid>("OrgUnitId")
                        .HasColumnName("org_unit_id");

                    b.Property<Guid>("OrganizationInfoId")
                        .HasColumnName("organization_info_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnName("performer_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.HasKey("Id")
                        .HasName("pk_iml_licenses");

                    b.HasIndex("OrgUnitId")
                        .HasName("ix_iml_licenses_org_unit_id");

                    b.HasIndex("ParentId")
                        .HasName("ix_iml_licenses_parent_id");

                    b.HasIndex("PerformerId")
                        .HasName("ix_iml_licenses_performer_id");

                    b.ToTable("iml_licenses");
                });

            modelBuilder.Entity("App.Data.Models.LimsDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnName("applicant_id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("DerivedClass")
                        .HasColumnName("derived_class");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(2000);

                    b.Property<string>("EMail")
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("FaxNumber")
                        .HasColumnName("fax_number")
                        .HasMaxLength(20);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<long>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<Guid>("OrgUnitId")
                        .HasColumnName("org_unit_id");

                    b.Property<Guid>("OrganizationInfoId")
                        .HasColumnName("organization_info_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnName("performer_id");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(24);

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.HasKey("Id")
                        .HasName("pk_lims_docs");

                    b.HasIndex("ApplicantId")
                        .HasName("ix_lims_docs_applicant_id");

                    b.HasIndex("OrgUnitId")
                        .HasName("ix_lims_docs_org_unit_id");

                    b.HasIndex("ParentId")
                        .HasName("ix_lims_docs_parent_id");

                    b.HasIndex("PerformerId")
                        .HasName("ix_lims_docs_performer_id");

                    b.ToTable("lims_docs");
                });

            modelBuilder.Entity("App.Data.Models.MSG.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AddressBusinessActivityId")
                        .HasColumnName("address_business_activity_id");

                    b.Property<string>("BaseClass")
                        .HasColumnName("base_class");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnName("closing_date");

                    b.Property<string>("ClosingReason")
                        .HasColumnName("closing_reason");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsCreatedOnPortal")
                        .HasColumnName("is_created_on_portal");

                    b.Property<bool>("IsImlLicense")
                        .HasColumnName("is_iml_license");

                    b.Property<bool>("IsPrlLicense")
                        .HasColumnName("is_prl_license");

                    b.Property<bool>("IsTrlLicense")
                        .HasColumnName("is_trl_license");

                    b.Property<DateTime?>("LeaseAgreementEndDate")
                        .HasColumnName("lease_agreement_end_date");

                    b.Property<DateTime?>("LeaseAgreementStartDate")
                        .HasColumnName("lease_agreement_start_date");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnName("message_date");

                    b.Property<string>("MessageHierarchyType")
                        .HasColumnName("message_hierarchy_type");

                    b.Property<string>("MessageNumber")
                        .HasColumnName("message_number");

                    b.Property<Guid>("MessageParentId")
                        .HasColumnName("message_parent_id");

                    b.Property<string>("MessageState")
                        .HasColumnName("message_state");

                    b.Property<string>("MessageText")
                        .HasColumnName("message_text");

                    b.Property<string>("MessageType")
                        .HasColumnName("message_type");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("MpdSelectedId")
                        .HasColumnName("mpd_selected_id");

                    b.Property<string>("NewLegalEntity")
                        .HasColumnName("new_legal_entity");

                    b.Property<Guid>("NewLocationId")
                        .HasColumnName("new_location_id");

                    b.Property<long?>("NewPharmacyArea")
                        .HasColumnName("new_pharmacy_area");

                    b.Property<string>("NewPharmacyName")
                        .HasColumnName("new_pharmacy_name");

                    b.Property<string>("NewSgdName")
                        .HasColumnName("new_sgd_name");

                    b.Property<long>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<Guid>("OrgUnitId")
                        .HasColumnName("org_unit_id");

                    b.Property<Guid>("OrganizationInfoId")
                        .HasColumnName("organization_info_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnName("performer_id");

                    b.Property<string>("PharmacyHeadFullName")
                        .HasColumnName("pharmacy_head_full_name");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<DateTime?>("RestorationDate")
                        .HasColumnName("restoration_date");

                    b.Property<string>("RestorationReason")
                        .HasColumnName("restoration_reason");

                    b.Property<string>("SgdNewFullName")
                        .HasColumnName("sgd_new_full_name");

                    b.Property<string>("SgdShiefFullName")
                        .HasColumnName("sgd_shief_full_name");

                    b.Property<string>("SuspensionReason")
                        .HasColumnName("suspension_reason");

                    b.Property<DateTime?>("SuspensionStartDate")
                        .HasColumnName("suspension_start_date");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("OrgUnitId")
                        .HasName("ix_messages_org_unit_id");

                    b.HasIndex("ParentId")
                        .HasName("ix_messages_parent_id");

                    b.HasIndex("PerformerId")
                        .HasName("ix_messages_performer_id");

                    b.HasIndex("RegNumber")
                        .IsUnique()
                        .HasName("ix_messages_reg_number");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("App.Data.Models.NTF.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("DateOfCreate")
                        .HasColumnName("date_of_create");

                    b.Property<bool?>("IsSend")
                        .HasColumnName("is_send");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("NotificationSort")
                        .HasColumnName("notification_sort")
                        .HasMaxLength(100);

                    b.Property<string>("NotificationSubject")
                        .HasColumnName("notification_subject")
                        .HasMaxLength(300);

                    b.Property<string>("NotificationText")
                        .HasColumnName("notification_text")
                        .HasMaxLength(10000);

                    b.Property<string>("NotificationType")
                        .HasColumnName("notification_type")
                        .HasMaxLength(10);

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<string>("RecipientJsonList")
                        .HasColumnName("recipient_json_list")
                        .HasMaxLength(10000);

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("App.Data.Models.ORG.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<string>("AdressEng")
                        .HasColumnName("adress_eng");

                    b.Property<string>("BaseClass")
                        .HasColumnName("base_class");

                    b.Property<string>("BranchActivity")
                        .HasColumnName("branch_activity")
                        .HasMaxLength(20);

                    b.Property<Guid>("BranchId")
                        .HasColumnName("branch_id");

                    b.Property<string>("BranchState")
                        .HasColumnName("branch_state")
                        .HasMaxLength(20);

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Category")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(20);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("EMail")
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("FaxNumber")
                        .HasColumnName("fax_number")
                        .HasMaxLength(20);

                    b.Property<string>("ImlAnotherActivity")
                        .HasColumnName("iml_another_activity")
                        .HasMaxLength(255);

                    b.Property<bool>("ImlIsAvailiablePermitIssueZone")
                        .HasColumnName("iml_is_availiable_permit_issue_zone");

                    b.Property<bool>("ImlIsAvailiableQuality")
                        .HasColumnName("iml_is_availiable_quality");

                    b.Property<bool>("ImlIsAvailiableStorageZone")
                        .HasColumnName("iml_is_availiable_storage_zone");

                    b.Property<bool>("ImlIsImportingFinished")
                        .HasColumnName("iml_is_importing_finished");

                    b.Property<bool>("ImlIsImportingInBulk")
                        .HasColumnName("iml_is_importing_in_bulk");

                    b.Property<bool?>("IsFromLicense")
                        .HasColumnName("is_from_license");

                    b.Property<bool?>("LicenseDeleteCheck")
                        .HasColumnName("license_delete_check");

                    b.Property<int>("LimsLicenseBranchId")
                        .HasColumnName("lims_license_branch_id");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<long>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<string>("OperationListForm")
                        .HasColumnName("operation_list_form");

                    b.Property<string>("OperationListFormChanging")
                        .HasColumnName("operation_list_form_changing");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasMaxLength(255);

                    b.Property<bool>("PrlIsAvailiablePickupZone")
                        .HasColumnName("prl_is_availiable_pickup_zone");

                    b.Property<bool>("PrlIsAvailiableProdSites")
                        .HasColumnName("prl_is_availiable_prod_sites");

                    b.Property<bool>("PrlIsAvailiableQualityZone")
                        .HasColumnName("prl_is_availiable_quality_zone");

                    b.Property<bool>("PrlIsAvailiableStorageZone")
                        .HasColumnName("prl_is_availiable_storage_zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("State")
                        .HasColumnName("state");

                    b.Property<bool>("TrlIsManufacture")
                        .HasColumnName("trl_is_manufacture");

                    b.Property<bool>("TrlIsRetail")
                        .HasColumnName("trl_is_retail");

                    b.Property<bool>("TrlIsWholesale")
                        .HasColumnName("trl_is_wholesale");

                    b.HasKey("Id")
                        .HasName("pk_org_branches");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_org_branches_organization_id");

                    b.ToTable("org_branches");
                });

            modelBuilder.Entity("App.Data.Models.ORG.OrganizationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("FaxNumber")
                        .HasColumnName("fax_number")
                        .HasMaxLength(20);

                    b.Property<string>("InternationalAccount")
                        .HasColumnName("international_account")
                        .HasMaxLength(50);

                    b.Property<string>("InternationalBankRequisites")
                        .HasColumnName("international_bank_requisites")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActualInfo")
                        .HasColumnName("is_actual_info");

                    b.Property<bool>("IsPendingLicenseUpdate")
                        .HasColumnName("is_pending_license_update");

                    b.Property<string>("LegalFormType")
                        .HasColumnName("legal_form_type")
                        .HasMaxLength(255);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("NationalAccount")
                        .HasColumnName("national_account")
                        .HasMaxLength(50);

                    b.Property<string>("NationalBankRequisites")
                        .HasColumnName("national_bank_requisites")
                        .HasMaxLength(255);

                    b.Property<string>("OrgDirector")
                        .HasColumnName("org_director")
                        .HasMaxLength(250);

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id");

                    b.Property<string>("OwnershipType")
                        .HasColumnName("ownership_type")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("PassportDate")
                        .HasColumnName("passport_date");

                    b.Property<string>("PassportIssueUnit")
                        .HasColumnName("passport_issue_unit")
                        .HasMaxLength(200);

                    b.Property<string>("PassportNumber")
                        .HasColumnName("passport_number")
                        .HasMaxLength(12);

                    b.Property<string>("PassportSerial")
                        .HasColumnName("passport_serial")
                        .HasMaxLength(2);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasMaxLength(255);

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("pk_org_organization_info");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_org_organization_info_organization_id");

                    b.ToTable("org_organization_info");
                });

            modelBuilder.Entity("App.Data.Models.PRL.PrlApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid?>("AppDecisionId")
                        .HasColumnName("app_decision_id");

                    b.Property<string>("AppDecisionNotes")
                        .HasColumnName("app_decision_notes");

                    b.Property<Guid?>("AppLicenseMessageId")
                        .HasColumnName("app_license_message_id");

                    b.Property<Guid?>("AppPreLicenseCheckId")
                        .HasColumnName("app_pre_license_check_id");

                    b.Property<string>("AppSort")
                        .HasColumnName("app_sort")
                        .HasMaxLength(40);

                    b.Property<string>("AppState")
                        .HasColumnName("app_state")
                        .HasMaxLength(30);

                    b.Property<string>("AppType")
                        .HasColumnName("app_type")
                        .HasMaxLength(30);

                    b.Property<string>("BackOfficeAppState")
                        .HasColumnName("back_office_app_state")
                        .HasMaxLength(30);

                    b.Property<string>("BaseClass")
                        .HasColumnName("base_class");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Duns")
                        .HasColumnName("duns");

                    b.Property<string>("ErrorProcessingLicense")
                        .HasColumnName("error_processing_license");

                    b.Property<DateTime?>("ExpertiseDate")
                        .HasColumnName("expertise_date");

                    b.Property<string>("ExpertiseResult")
                        .HasColumnName("expertise_result");

                    b.Property<bool>("IsAgreeLicenseTerms")
                        .HasColumnName("is_agree_license_terms");

                    b.Property<bool>("IsAgreeProcessingData")
                        .HasColumnName("is_agree_processing_data");

                    b.Property<bool>("IsCheckMpd")
                        .HasColumnName("is_check_mpd");

                    b.Property<bool>("IsCourierDelivery")
                        .HasColumnName("is_courier_delivery");

                    b.Property<bool>("IsCourierResults")
                        .HasColumnName("is_courier_results");

                    b.Property<bool>("IsCreatedOnPortal")
                        .HasColumnName("is_created_on_portal");

                    b.Property<bool>("IsElectricFormResults")
                        .HasColumnName("is_electric_form_results");

                    b.Property<bool>("IsPaperLicense")
                        .HasColumnName("is_paper_license");

                    b.Property<bool>("IsPostDelivery")
                        .HasColumnName("is_post_delivery");

                    b.Property<bool>("IsPostResults")
                        .HasColumnName("is_post_results");

                    b.Property<bool>("IsProtectionFromAggressors")
                        .HasColumnName("is_protection_from_aggressors");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<long>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<Guid>("OrgUnitId")
                        .HasColumnName("org_unit_id");

                    b.Property<Guid>("OrganizationInfoId")
                        .HasColumnName("organization_info_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnName("performer_id");

                    b.Property<Guid?>("PerformerOfExpertise")
                        .HasColumnName("performer_of_expertise");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.HasKey("Id")
                        .HasName("pk_prl_applications");

                    b.HasIndex("AppDecisionId")
                        .HasName("ix_prl_applications_app_decision_id");

                    b.HasIndex("AppLicenseMessageId")
                        .HasName("ix_prl_applications_app_license_message_id");

                    b.HasIndex("AppPreLicenseCheckId")
                        .HasName("ix_prl_applications_app_pre_license_check_id");

                    b.HasIndex("OrgUnitId")
                        .HasName("ix_prl_applications_org_unit_id");

                    b.HasIndex("ParentId")
                        .HasName("ix_prl_applications_parent_id");

                    b.HasIndex("PerformerId")
                        .HasName("ix_prl_applications_performer_id");

                    b.ToTable("prl_applications");
                });

            modelBuilder.Entity("App.Data.Models.PRL.PrlBranchContractor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("BranchId")
                        .HasColumnName("branch_id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("ContractorId")
                        .HasColumnName("contractor_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_prl_branch_contractors");

                    b.HasIndex("BranchId")
                        .HasName("ix_prl_branch_contractors_branch_id");

                    b.HasIndex("ContractorId")
                        .HasName("ix_prl_branch_contractors_contractor_id");

                    b.ToTable("prl_branch_contractors");
                });

            modelBuilder.Entity("App.Data.Models.PRL.PrlContractor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(200);

                    b.Property<Guid>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("ContractorType")
                        .HasColumnName("contractor_type")
                        .HasMaxLength(30);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Edrpou")
                        .HasColumnName("edrpou")
                        .HasMaxLength(15);

                    b.Property<bool?>("IsFromLicense")
                        .HasColumnName("is_from_license");

                    b.Property<Guid?>("LicenseContractorId")
                        .HasColumnName("license_contractor_id");

                    b.Property<bool?>("LicenseDeleteCheck")
                        .HasColumnName("license_delete_check");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.HasKey("Id")
                        .HasName("pk_prl_contractors");

                    b.ToTable("prl_contractors");
                });

            modelBuilder.Entity("App.Data.Models.PRL.PrlLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BaseClass")
                        .HasColumnName("base_class");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndOrderDate")
                        .HasColumnName("end_order_date");

                    b.Property<string>("EndOrderNumber")
                        .HasColumnName("end_order_number");

                    b.Property<string>("EndOrderText")
                        .HasColumnName("end_order_text");

                    b.Property<string>("EndReasonText")
                        .HasColumnName("end_reason_text");

                    b.Property<bool>("IsRelevant")
                        .HasColumnName("is_relevant");

                    b.Property<string>("LicSort")
                        .HasColumnName("lic_sort")
                        .HasMaxLength(40);

                    b.Property<string>("LicState")
                        .HasColumnName("lic_state")
                        .HasMaxLength(30);

                    b.Property<string>("LicType")
                        .HasColumnName("lic_type")
                        .HasMaxLength(30);

                    b.Property<string>("LicenseDate")
                        .HasColumnName("license_date");

                    b.Property<string>("LicenseNumber")
                        .HasColumnName("license_number");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<long>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<string>("OrderDate")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<Guid>("OrgUnitId")
                        .HasColumnName("org_unit_id");

                    b.Property<Guid>("OrganizationInfoId")
                        .HasColumnName("organization_info_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnName("performer_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.HasKey("Id")
                        .HasName("pk_prl_licenses");

                    b.HasIndex("OrgUnitId")
                        .HasName("ix_prl_licenses_org_unit_id");

                    b.HasIndex("ParentId")
                        .HasName("ix_prl_licenses_parent_id");

                    b.HasIndex("PerformerId")
                        .HasName("ix_prl_licenses_performer_id");

                    b.ToTable("prl_licenses");
                });

            modelBuilder.Entity("App.Data.Models.TRL.TrlApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid?>("AppDecisionId")
                        .HasColumnName("app_decision_id");

                    b.Property<string>("AppDecisionNotes")
                        .HasColumnName("app_decision_notes");

                    b.Property<Guid?>("AppLicenseMessageId")
                        .HasColumnName("app_license_message_id");

                    b.Property<Guid?>("AppPreLicenseCheckId")
                        .HasColumnName("app_pre_license_check_id");

                    b.Property<string>("AppSort")
                        .HasColumnName("app_sort")
                        .HasMaxLength(40);

                    b.Property<string>("AppState")
                        .HasColumnName("app_state")
                        .HasMaxLength(30);

                    b.Property<string>("AppType")
                        .HasColumnName("app_type")
                        .HasMaxLength(30);

                    b.Property<string>("BackOfficeAppState")
                        .HasColumnName("back_office_app_state")
                        .HasMaxLength(30);

                    b.Property<string>("BaseClass")
                        .HasColumnName("base_class");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Duns")
                        .HasColumnName("duns");

                    b.Property<string>("ErrorProcessingLicense")
                        .HasColumnName("error_processing_license");

                    b.Property<DateTime?>("ExpertiseDate")
                        .HasColumnName("expertise_date");

                    b.Property<string>("ExpertiseResult")
                        .HasColumnName("expertise_result");

                    b.Property<bool>("IsAgreeLicenseTerms")
                        .HasColumnName("is_agree_license_terms");

                    b.Property<bool>("IsAgreeProcessingData")
                        .HasColumnName("is_agree_processing_data");

                    b.Property<bool>("IsCheckMpd")
                        .HasColumnName("is_check_mpd");

                    b.Property<bool>("IsCourierDelivery")
                        .HasColumnName("is_courier_delivery");

                    b.Property<bool>("IsCourierResults")
                        .HasColumnName("is_courier_results");

                    b.Property<bool>("IsCreatedOnPortal")
                        .HasColumnName("is_created_on_portal");

                    b.Property<bool>("IsElectricFormResults")
                        .HasColumnName("is_electric_form_results");

                    b.Property<bool>("IsPaperLicense")
                        .HasColumnName("is_paper_license");

                    b.Property<bool>("IsPostDelivery")
                        .HasColumnName("is_post_delivery");

                    b.Property<bool>("IsPostResults")
                        .HasColumnName("is_post_results");

                    b.Property<bool>("IsProtectionFromAggressors")
                        .HasColumnName("is_protection_from_aggressors");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<long>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<Guid>("OrgUnitId")
                        .HasColumnName("org_unit_id");

                    b.Property<Guid>("OrganizationInfoId")
                        .HasColumnName("organization_info_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnName("performer_id");

                    b.Property<Guid?>("PerformerOfExpertise")
                        .HasColumnName("performer_of_expertise");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.HasKey("Id")
                        .HasName("pk_trl_applications");

                    b.HasIndex("AppDecisionId")
                        .HasName("ix_trl_applications_app_decision_id");

                    b.HasIndex("AppLicenseMessageId")
                        .HasName("ix_trl_applications_app_license_message_id");

                    b.HasIndex("AppPreLicenseCheckId")
                        .HasName("ix_trl_applications_app_pre_license_check_id");

                    b.HasIndex("OrgUnitId")
                        .HasName("ix_trl_applications_org_unit_id");

                    b.HasIndex("ParentId")
                        .HasName("ix_trl_applications_parent_id");

                    b.HasIndex("PerformerId")
                        .HasName("ix_trl_applications_performer_id");

                    b.ToTable("trl_applications");
                });

            modelBuilder.Entity("App.Data.Models.TRL.TrlLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BaseClass")
                        .HasColumnName("base_class");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndOrderDate")
                        .HasColumnName("end_order_date");

                    b.Property<string>("EndOrderNumber")
                        .HasColumnName("end_order_number");

                    b.Property<string>("EndOrderText")
                        .HasColumnName("end_order_text");

                    b.Property<string>("EndReasonText")
                        .HasColumnName("end_reason_text");

                    b.Property<bool>("IsRelevant")
                        .HasColumnName("is_relevant");

                    b.Property<string>("LicSort")
                        .HasColumnName("lic_sort")
                        .HasMaxLength(40);

                    b.Property<string>("LicState")
                        .HasColumnName("lic_state")
                        .HasMaxLength(30);

                    b.Property<string>("LicType")
                        .HasColumnName("lic_type")
                        .HasMaxLength(30);

                    b.Property<string>("LicenseDate")
                        .HasColumnName("license_date");

                    b.Property<string>("LicenseNumber")
                        .HasColumnName("license_number");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on");

                    b.Property<long>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<string>("OrderDate")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<Guid>("OrgUnitId")
                        .HasColumnName("org_unit_id");

                    b.Property<Guid>("OrganizationInfoId")
                        .HasColumnName("organization_info_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnName("performer_id");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.HasKey("Id")
                        .HasName("pk_trl_licenses");

                    b.HasIndex("OrgUnitId")
                        .HasName("ix_trl_licenses_org_unit_id");

                    b.HasIndex("ParentId")
                        .HasName("ix_trl_licenses_parent_id");

                    b.HasIndex("PerformerId")
                        .HasName("ix_trl_licenses_performer_id");

                    b.ToTable("trl_licenses");
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntry", b =>
                {
                    b.Property<int>("AuditEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_entry_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<string>("EntitySetName")
                        .HasColumnName("entity_set_name")
                        .HasMaxLength(255);

                    b.Property<string>("EntityTypeName")
                        .HasColumnName("entity_type_name")
                        .HasMaxLength(255);

                    b.Property<int>("State")
                        .HasColumnName("state");

                    b.Property<string>("StateName")
                        .HasColumnName("state_name")
                        .HasMaxLength(255);

                    b.HasKey("AuditEntryID")
                        .HasName("pk_audit_entries");

                    b.ToTable("audit_entries");
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntryProperty", b =>
                {
                    b.Property<int>("AuditEntryPropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_entry_property_id");

                    b.Property<int>("AuditEntryID")
                        .HasColumnName("audit_entry_id");

                    b.Property<string>("NewValueFormatted")
                        .HasColumnName("new_value_formatted");

                    b.Property<string>("OldValueFormatted")
                        .HasColumnName("old_value_formatted");

                    b.Property<string>("PropertyName")
                        .HasColumnName("property_name")
                        .HasMaxLength(255);

                    b.Property<string>("RelationName")
                        .HasColumnName("relation_name")
                        .HasMaxLength(255);

                    b.HasKey("AuditEntryPropertyID")
                        .HasName("pk_audit_entry_properties");

                    b.HasIndex("AuditEntryID")
                        .HasName("ix_audit_entry_properties_audit_entry_id");

                    b.ToTable("audit_entry_properties");
                });

            modelBuilder.Entity("App.Data.Models.ORG.EmployeeExt", b =>
                {
                    b.HasBaseType("App.Core.Data.Entities.ORG.Employee");

                    b.Property<Guid?>("AtuRegionId")
                        .HasColumnName("atu_region_id");

                    b.Property<int?>("OldLimsId")
                        .HasColumnName("old_lims_id");

                    b.Property<Guid?>("OrgUnitSpecializationId")
                        .HasColumnName("org_unit_specialization_id");

                    b.Property<bool>("PersonalCabinetStatus")
                        .HasColumnName("personal_cabinet_status");

                    b.Property<string>("Position")
                        .HasColumnName("position");

                    b.Property<bool>("ReceiveOnChangeAllApplication")
                        .HasColumnName("receive_on_change_all_application");

                    b.Property<bool>("ReceiveOnChangeAllMessage")
                        .HasColumnName("receive_on_change_all_message");

                    b.Property<bool>("ReceiveOnChangeOrgInfo")
                        .HasColumnName("receive_on_change_org_info");

                    b.Property<bool>("ReceiveOnChangeOwnApplication")
                        .HasColumnName("receive_on_change_own_application");

                    b.Property<bool>("ReceiveOnChangeOwnMessage")
                        .HasColumnName("receive_on_change_own_message");

                    b.Property<bool>("ReceiveOnOverduePayment")
                        .HasColumnName("receive_on_overdue_payment");

                    b.Property<string>("UserEmail")
                        .HasColumnName("user_email");

                    b.ToTable("org_employee");

                    b.HasDiscriminator().HasValue("EmployeeExt");
                });

            modelBuilder.Entity("App.Data.Models.ORG.OrganizationExt", b =>
                {
                    b.HasBaseType("App.Core.Data.Entities.ORG.Organization");

                    b.Property<string>("EDRPOU")
                        .HasColumnName("edrpou")
                        .HasMaxLength(30);

                    b.Property<string>("EMail")
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("INN")
                        .HasColumnName("inn")
                        .HasMaxLength(30);

                    b.ToTable("org_organization");

                    b.HasDiscriminator().HasValue("OrganizationExt");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ATU.City", b =>
                {
                    b.HasOne("App.Core.Data.Entities.ATU.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_atu_city_atu_region_region_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Data.Entities.ATU.CityDistricts", b =>
                {
                    b.HasOne("App.Core.Data.Entities.ATU.City", "City")
                        .WithMany("Dictricts")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_atu_city_districts_atu_city_city_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Data.Entities.ATU.Region", b =>
                {
                    b.HasOne("App.Core.Data.Entities.ATU.Country", "Country")
                        .WithMany("Region")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_atu_region_atu_country_country_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Data.Entities.ATU.Region", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_atu_region_atu_region_parent_id");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ATU.Street", b =>
                {
                    b.HasOne("App.Core.Data.Entities.ATU.City", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_atu_street_atu_city_city_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Data.Entities.CDN.EmployeeSpeciality", b =>
                {
                    b.HasOne("App.Core.Data.Entities.ORG.Employee", "Employee")
                        .WithMany("EmployeeSpecialities")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_cdn_employee_speciality_org_employee_employee_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Data.Entities.CDN.Speciality", "Speciality")
                        .WithMany("EmployeeSpecialities")
                        .HasForeignKey("SpecialityId")
                        .HasConstraintName("fk_cdn_employee_speciality_cdn_speciality_speciality_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Data.Entities.CDN.Speciality", b =>
                {
                    b.HasOne("App.Core.Data.Entities.CDN.Speciality", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_cdn_speciality_cdn_speciality_parent_id");
                });

            modelBuilder.Entity("App.Core.Data.Entities.Common.ApplicationSettingValue", b =>
                {
                    b.HasOne("App.Core.Data.Entities.Common.ApplicationSetting", "ApplicationSetting")
                        .WithMany()
                        .HasForeignKey("ApplicationSettingId")
                        .HasConstraintName("fk_sys_application_setting_value_sys_application_setting_appli~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Data.Entities.ORG.Employee", b =>
                {
                    b.HasOne("App.Core.Data.Entities.ORG.OrgUnitPosition")
                        .WithMany("Employees")
                        .HasForeignKey("OrgUnitPositionId")
                        .HasConstraintName("fk_org_employee_org_unit_position_org_unit_position_id");

                    b.HasOne("App.Core.Data.Entities.ORG.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_org_employee_org_organization_organization_id");

                    b.HasOne("App.Core.Data.Entities.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_org_employee_person_person_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Data.Entities.ORG.OrgUnit", b =>
                {
                    b.HasOne("App.Core.Data.Entities.ATU.SubjectAddress", "SubjectAddress")
                        .WithMany()
                        .HasForeignKey("SubjectAddressId")
                        .HasConstraintName("fk_org_unit_atu_subject_address_subject_address_id");
                });

            modelBuilder.Entity("App.Core.Data.Entities.ORG.OrgUnitPosition", b =>
                {
                    b.HasOne("App.Core.Data.Entities.ORG.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("OrgUnitId")
                        .HasConstraintName("fk_org_unit_position_org_unit_org_unit_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Data.Entities.CDN.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .HasConstraintName("fk_org_unit_position_cdn_position_position_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Data.Entities.ORG.OrgUnitPositionEmployee", b =>
                {
                    b.HasOne("App.Core.Data.Entities.ORG.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_org_unit_position_employee_org_employee_employee_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Data.Entities.ORG.OrgUnitPosition", "OrgUnitPosition")
                        .WithMany()
                        .HasForeignKey("OrgUnitPositionId")
                        .HasConstraintName("fk_org_unit_position_employee_org_unit_position_org_unit_posit~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Security.Entities.FieldRight", b =>
                {
                    b.HasOne("App.Core.Security.Entities.Right", "Right")
                        .WithMany("FieldRights")
                        .HasForeignKey("RightId")
                        .HasConstraintName("fk_sec_field_right_sec_right_right_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Security.Entities.ProfileRight", b =>
                {
                    b.HasOne("App.Core.Security.Entities.Profile", "Profile")
                        .WithMany("Rights")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("fk_sec_profile_right_sec_profile_profile_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Security.Entities.Right", "Right")
                        .WithMany("Profiles")
                        .HasForeignKey("RightId")
                        .HasConstraintName("fk_sec_profile_right_sec_right_right_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Security.Entities.ProfileRole", b =>
                {
                    b.HasOne("App.Core.Security.Entities.Profile", "Profile")
                        .WithMany("Roles")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("fk_sec_profile_role_sec_profile_profile_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Security.Entities.Role", "Role")
                        .WithMany("Profiles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_sec_profile_role_sec_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Security.Entities.RoleRight", b =>
                {
                    b.HasOne("App.Core.Security.Entities.Right", "Right")
                        .WithMany("Roles")
                        .HasForeignKey("RightId")
                        .HasConstraintName("fk_sec_role_right_sec_right_right_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Security.Entities.Role", "Role")
                        .WithMany("Rights")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_sec_role_right_sec_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Security.Entities.RowLevelRight", b =>
                {
                    b.HasOne("App.Core.Security.Entities.Profile")
                        .WithMany("RowLevelRights")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("fk_sec_row_level_right_sec_profile_profile_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Security.Entities.RowLevelSecurityObject", b =>
                {
                    b.HasOne("App.Core.Security.Entities.RowLevelRight", "RowLevelRight")
                        .WithMany("RowLevelSecurityObjects")
                        .HasForeignKey("RowLevelRightId")
                        .HasConstraintName("fk_sec_row_level_security_object_sec_row_level_right_row_level~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Security.Entities.UserDefaultValue", b =>
                {
                    b.HasOne("App.Data.Models.ORG.EmployeeExt")
                        .WithMany("DefaultValues")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_sec_user_default_value_org_employee_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Security.Entities.UserProfile", b =>
                {
                    b.HasOne("App.Core.Security.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("fk_sec_user_profile_sec_profile_profile_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.ORG.EmployeeExt")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_sec_user_profile_org_employee_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Data.Models.APP.AppAssignee", b =>
                {
                    b.HasOne("App.Data.Models.APP.AppAssignee", "LicenseAssignee")
                        .WithMany()
                        .HasForeignKey("LicenseAssigneeId")
                        .HasConstraintName("fk_app_assignees_app_assignees_license_assignee_id");
                });

            modelBuilder.Entity("App.Data.Models.APP.AppAssigneeBranch", b =>
                {
                    b.HasOne("App.Data.Models.APP.AppAssignee", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .HasConstraintName("fk_app_assignee_branches_app_assignees_assignee_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.ORG.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .HasConstraintName("fk_app_assignee_branches_org_branches_branch_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Data.Models.APP.AppDecision", b =>
                {
                    b.HasOne("App.Data.Models.APP.AppProtocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId")
                        .HasConstraintName("fk_app_decisions_app_protocols_protocol_id");
                });

            modelBuilder.Entity("App.Data.Models.APP.AppDecisionReason", b =>
                {
                    b.HasOne("App.Data.Models.APP.AppDecision", "AppDecision")
                        .WithMany("AppDecisionReasons")
                        .HasForeignKey("AppDecisionId")
                        .HasConstraintName("fk_app_decision_reasons_app_decisions_app_decision_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Data.Models.APP.ApplicationBranch", b =>
                {
                    b.HasOne("App.Data.Models.ORG.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .HasConstraintName("fk_application_branches_org_branches_branch_id");

                    b.HasOne("App.Data.Models.LimsDoc", "LimsDocument")
                        .WithMany()
                        .HasForeignKey("LimsDocumentId")
                        .HasConstraintName("fk_application_branches_lims_docs_lims_document_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Data.Models.DOC.BranchEDocument", b =>
                {
                    b.HasOne("App.Data.Models.ORG.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .HasConstraintName("fk_branch_edocuments_org_branches_branch_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.DOS.EDocument", "EDocument")
                        .WithMany()
                        .HasForeignKey("EDocumentId")
                        .HasConstraintName("fk_branch_edocuments_edocuments_edocument_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Data.Models.IML.ImlApplication", b =>
                {
                    b.HasOne("App.Data.Models.APP.AppDecision", "AppDecision")
                        .WithMany()
                        .HasForeignKey("AppDecisionId")
                        .HasConstraintName("fk_iml_applications_app_decisions_app_decision_id");

                    b.HasOne("App.Data.Models.APP.AppLicenseMessage", "AppLicenseMessage")
                        .WithMany()
                        .HasForeignKey("AppLicenseMessageId")
                        .HasConstraintName("fk_iml_applications_app_license_messages_app_license_message_id");

                    b.HasOne("App.Data.Models.APP.AppPreLicenseCheck", "AppPreLicenseCheck")
                        .WithMany()
                        .HasForeignKey("AppPreLicenseCheckId")
                        .HasConstraintName("fk_iml_applications_app_pre_license_checks_app_pre_license_che~");

                    b.HasOne("App.Data.Models.ORG.OrganizationExt", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("OrgUnitId")
                        .HasConstraintName("fk_iml_applications_org_organization_org_unit_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.LimsDoc", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_iml_applications_lims_docs_parent_id");

                    b.HasOne("App.Core.Data.Entities.ORG.Employee", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .HasConstraintName("fk_iml_applications_org_employee_performer_id");
                });

            modelBuilder.Entity("App.Data.Models.IML.ImlLicense", b =>
                {
                    b.HasOne("App.Data.Models.ORG.OrganizationExt", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("OrgUnitId")
                        .HasConstraintName("fk_iml_licenses_org_organization_org_unit_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.LimsDoc", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_iml_licenses_lims_docs_parent_id");

                    b.HasOne("App.Core.Data.Entities.ORG.Employee", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .HasConstraintName("fk_iml_licenses_org_employee_performer_id");
                });

            modelBuilder.Entity("App.Data.Models.LimsDoc", b =>
                {
                    b.HasOne("App.Data.Models.ORG.OrganizationExt", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .HasConstraintName("fk_lims_docs_org_organization_applicant_id");

                    b.HasOne("App.Data.Models.ORG.OrganizationExt", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("OrgUnitId")
                        .HasConstraintName("fk_lims_docs_org_organization_org_unit_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.LimsDoc", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_lims_docs_lims_docs_parent_id");

                    b.HasOne("App.Core.Data.Entities.ORG.Employee", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .HasConstraintName("fk_lims_docs_org_employee_performer_id");
                });

            modelBuilder.Entity("App.Data.Models.MSG.Message", b =>
                {
                    b.HasOne("App.Data.Models.ORG.OrganizationExt", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("OrgUnitId")
                        .HasConstraintName("fk_messages_org_organization_org_unit_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.LimsDoc", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_messages_lims_docs_parent_id");

                    b.HasOne("App.Core.Data.Entities.ORG.Employee", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .HasConstraintName("fk_messages_org_employee_performer_id");
                });

            modelBuilder.Entity("App.Data.Models.ORG.Branch", b =>
                {
                    b.HasOne("App.Data.Models.ORG.OrganizationExt", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_org_branches_org_organization_organization_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Data.Models.ORG.OrganizationInfo", b =>
                {
                    b.HasOne("App.Data.Models.ORG.OrganizationExt", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_org_organization_info_org_organization_organization_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Data.Models.PRL.PrlApplication", b =>
                {
                    b.HasOne("App.Data.Models.APP.AppDecision", "AppDecision")
                        .WithMany()
                        .HasForeignKey("AppDecisionId")
                        .HasConstraintName("fk_prl_applications_app_decisions_app_decision_id");

                    b.HasOne("App.Data.Models.APP.AppLicenseMessage", "AppLicenseMessage")
                        .WithMany()
                        .HasForeignKey("AppLicenseMessageId")
                        .HasConstraintName("fk_prl_applications_app_license_messages_app_license_message_id");

                    b.HasOne("App.Data.Models.APP.AppPreLicenseCheck", "AppPreLicenseCheck")
                        .WithMany()
                        .HasForeignKey("AppPreLicenseCheckId")
                        .HasConstraintName("fk_prl_applications_app_pre_license_checks_app_pre_license_che~");

                    b.HasOne("App.Data.Models.ORG.OrganizationExt", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("OrgUnitId")
                        .HasConstraintName("fk_prl_applications_org_organization_org_unit_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.LimsDoc", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_prl_applications_lims_docs_parent_id");

                    b.HasOne("App.Core.Data.Entities.ORG.Employee", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .HasConstraintName("fk_prl_applications_org_employee_performer_id");
                });

            modelBuilder.Entity("App.Data.Models.PRL.PrlBranchContractor", b =>
                {
                    b.HasOne("App.Data.Models.ORG.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .HasConstraintName("fk_prl_branch_contractors_org_branches_branch_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.PRL.PrlContractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .HasConstraintName("fk_prl_branch_contractors_prl_contractors_contractor_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Data.Models.PRL.PrlLicense", b =>
                {
                    b.HasOne("App.Data.Models.ORG.OrganizationExt", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("OrgUnitId")
                        .HasConstraintName("fk_prl_licenses_org_organization_org_unit_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.LimsDoc", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_prl_licenses_lims_docs_parent_id");

                    b.HasOne("App.Core.Data.Entities.ORG.Employee", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .HasConstraintName("fk_prl_licenses_org_employee_performer_id");
                });

            modelBuilder.Entity("App.Data.Models.TRL.TrlApplication", b =>
                {
                    b.HasOne("App.Data.Models.APP.AppDecision", "AppDecision")
                        .WithMany()
                        .HasForeignKey("AppDecisionId")
                        .HasConstraintName("fk_trl_applications_app_decisions_app_decision_id");

                    b.HasOne("App.Data.Models.APP.AppLicenseMessage", "AppLicenseMessage")
                        .WithMany()
                        .HasForeignKey("AppLicenseMessageId")
                        .HasConstraintName("fk_trl_applications_app_license_messages_app_license_message_id");

                    b.HasOne("App.Data.Models.APP.AppPreLicenseCheck", "AppPreLicenseCheck")
                        .WithMany()
                        .HasForeignKey("AppPreLicenseCheckId")
                        .HasConstraintName("fk_trl_applications_app_pre_license_checks_app_pre_license_che~");

                    b.HasOne("App.Data.Models.ORG.OrganizationExt", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("OrgUnitId")
                        .HasConstraintName("fk_trl_applications_org_organization_org_unit_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.LimsDoc", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_trl_applications_lims_docs_parent_id");

                    b.HasOne("App.Core.Data.Entities.ORG.Employee", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .HasConstraintName("fk_trl_applications_org_employee_performer_id");
                });

            modelBuilder.Entity("App.Data.Models.TRL.TrlLicense", b =>
                {
                    b.HasOne("App.Data.Models.ORG.OrganizationExt", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("OrgUnitId")
                        .HasConstraintName("fk_trl_licenses_org_organization_org_unit_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Data.Models.LimsDoc", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_trl_licenses_lims_docs_parent_id");

                    b.HasOne("App.Core.Data.Entities.ORG.Employee", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .HasConstraintName("fk_trl_licenses_org_employee_performer_id");
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntryProperty", b =>
                {
                    b.HasOne("Z.EntityFramework.Plus.AuditEntry", "Parent")
                        .WithMany("Properties")
                        .HasForeignKey("AuditEntryID")
                        .HasConstraintName("fk_audit_entry_properties_audit_entries_audit_entry_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
