//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UACryptoSign
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://cryptoauth/", ConfigurationName="UACryptoSign.Service")]
    internal interface Service
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://cryptoauth/Service/encryptRequest", ReplyAction="http://cryptoauth/Service/encryptResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(responseBase))]
        System.Threading.Tasks.Task<UACryptoSign.encryptResponse> encryptAsync(UACryptoSign.encryptRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://cryptoauth/Service/decryptRequest", ReplyAction="http://cryptoauth/Service/decryptResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(responseBase))]
        System.Threading.Tasks.Task<UACryptoSign.decryptResponse> decryptAsync(UACryptoSign.decryptRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://cryptoauth/Service/verifyRequest", ReplyAction="http://cryptoauth/Service/verifyResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(responseBase))]
        System.Threading.Tasks.Task<UACryptoSign.verifyResponse> verifyAsync(UACryptoSign.verifyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://cryptoauth/Service/signDetachRequest", ReplyAction="http://cryptoauth/Service/signDetachResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(responseBase))]
        System.Threading.Tasks.Task<UACryptoSign.signDetachResponse> signDetachAsync(UACryptoSign.signDetachRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://cryptoauth/Service/verifyDetachRequest", ReplyAction="http://cryptoauth/Service/verifyDetachResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(responseBase))]
        System.Threading.Tasks.Task<UACryptoSign.verifyDetachResponse> verifyDetachAsync(UACryptoSign.verifyDetachRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://cryptoauth/Service/verifyAttachRequest", ReplyAction="http://cryptoauth/Service/verifyAttachResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(responseBase))]
        System.Threading.Tasks.Task<UACryptoSign.verifyAttachResponse> verifyAttachAsync(UACryptoSign.verifyAttachRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://cryptoauth/Service/signAttachRequest", ReplyAction="http://cryptoauth/Service/signAttachResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(responseBase))]
        System.Threading.Tasks.Task<UACryptoSign.signAttachResponse> signAttachAsync(UACryptoSign.signAttachRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://cryptoauth/Service/signRequest", ReplyAction="http://cryptoauth/Service/signResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(responseBase))]
        System.Threading.Tasks.Task<UACryptoSign.signResponse> signAsync(UACryptoSign.signRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://cryptoauth/")]
    public partial class responseCrypt : responseBase
    {
        
        private string dataField;
        
        private elementCert certField;
        
        private string signingTimeField;
        
        private bool timestampField;
        
        private bool timestampFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string data
        {
            get
            {
                return this.dataField;
            }
            set
            {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public elementCert cert
        {
            get
            {
                return this.certField;
            }
            set
            {
                this.certField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string signingTime
        {
            get
            {
                return this.signingTimeField;
            }
            set
            {
                this.signingTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=3)]
        public bool timestamp
        {
            get
            {
                return this.timestampField;
            }
            set
            {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timestampSpecified
        {
            get
            {
                return this.timestampFieldSpecified;
            }
            set
            {
                this.timestampFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://cryptoauth/")]
    public partial class elementCert
    {
        
        private string serialNumberField;
        
        private elementName subjectField;
        
        private elementName issuerField;
        
        private elementValidity validityField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string serialNumber
        {
            get
            {
                return this.serialNumberField;
            }
            set
            {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public elementName subject
        {
            get
            {
                return this.subjectField;
            }
            set
            {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public elementName issuer
        {
            get
            {
                return this.issuerField;
            }
            set
            {
                this.issuerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=3)]
        public elementValidity validity
        {
            get
            {
                return this.validityField;
            }
            set
            {
                this.validityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://cryptoauth/")]
    public partial class elementName
    {
        
        private string serialNumberField;
        
        private string commonNameField;
        
        private string titleField;
        
        private string organizationNameField;
        
        private string organizationalUnitNameField;
        
        private string stateOrProvinceNameField;
        
        private string localityNameField;
        
        private string surnameField;
        
        private string givenNameField;
        
        private string edrpouField;
        
        private string drfoField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string serialNumber
        {
            get
            {
                return this.serialNumberField;
            }
            set
            {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string commonName
        {
            get
            {
                return this.commonNameField;
            }
            set
            {
                this.commonNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=3)]
        public string organizationName
        {
            get
            {
                return this.organizationNameField;
            }
            set
            {
                this.organizationNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=4)]
        public string organizationalUnitName
        {
            get
            {
                return this.organizationalUnitNameField;
            }
            set
            {
                this.organizationalUnitNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=5)]
        public string stateOrProvinceName
        {
            get
            {
                return this.stateOrProvinceNameField;
            }
            set
            {
                this.stateOrProvinceNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=6)]
        public string localityName
        {
            get
            {
                return this.localityNameField;
            }
            set
            {
                this.localityNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=7)]
        public string surname
        {
            get
            {
                return this.surnameField;
            }
            set
            {
                this.surnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=8)]
        public string givenName
        {
            get
            {
                return this.givenNameField;
            }
            set
            {
                this.givenNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=9)]
        public string edrpou
        {
            get
            {
                return this.edrpouField;
            }
            set
            {
                this.edrpouField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=10)]
        public string drfo
        {
            get
            {
                return this.drfoField;
            }
            set
            {
                this.drfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://cryptoauth/")]
    public partial class elementValidity
    {
        
        private string notBeforeField;
        
        private string notAfterField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string notBefore
        {
            get
            {
                return this.notBeforeField;
            }
            set
            {
                this.notBeforeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string notAfter
        {
            get
            {
                return this.notAfterField;
            }
            set
            {
                this.notAfterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(responseCrypt))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://cryptoauth/")]
    public partial class responseBase
    {
        
        private int codeField;
        
        private string messageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public int code
        {
            get
            {
                return this.codeField;
            }
            set
            {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="encrypt", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class encryptRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string recipient;
        
        public encryptRequest()
        {
        }
        
        public encryptRequest(string data, string recipient)
        {
            this.data = data;
            this.recipient = recipient;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="encryptResponse", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class encryptResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UACryptoSign.responseCrypt @return;
        
        public encryptResponse()
        {
        }
        
        public encryptResponse(UACryptoSign.responseCrypt @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="decrypt", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class decryptRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string originator;
        
        public decryptRequest()
        {
        }
        
        public decryptRequest(string data, string originator)
        {
            this.data = data;
            this.originator = originator;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="decryptResponse", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class decryptResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UACryptoSign.responseCrypt @return;
        
        public decryptResponse()
        {
        }
        
        public decryptResponse(UACryptoSign.responseCrypt @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="verify", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class verifyRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string dataExt;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string cert;
        
        public verifyRequest()
        {
        }
        
        public verifyRequest(string data, string dataExt, string cert)
        {
            this.data = data;
            this.dataExt = dataExt;
            this.cert = cert;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="verifyResponse", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class verifyResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UACryptoSign.responseCrypt @return;
        
        public verifyResponse()
        {
        }
        
        public verifyResponse(UACryptoSign.responseCrypt @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="signDetach", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class signDetachRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string data;
        
        public signDetachRequest()
        {
        }
        
        public signDetachRequest(string data)
        {
            this.data = data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="signDetachResponse", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class signDetachResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UACryptoSign.responseCrypt @return;
        
        public signDetachResponse()
        {
        }
        
        public signDetachResponse(UACryptoSign.responseCrypt @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="verifyDetach", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class verifyDetachRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string dataExt;
        
        public verifyDetachRequest()
        {
        }
        
        public verifyDetachRequest(string data, string dataExt)
        {
            this.data = data;
            this.dataExt = dataExt;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="verifyDetachResponse", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class verifyDetachResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UACryptoSign.responseCrypt @return;
        
        public verifyDetachResponse()
        {
        }
        
        public verifyDetachResponse(UACryptoSign.responseCrypt @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="verifyAttach", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class verifyAttachRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string data;
        
        public verifyAttachRequest()
        {
        }
        
        public verifyAttachRequest(string data)
        {
            this.data = data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="verifyAttachResponse", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class verifyAttachResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UACryptoSign.responseCrypt @return;
        
        public verifyAttachResponse()
        {
        }
        
        public verifyAttachResponse(UACryptoSign.responseCrypt @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="signAttach", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class signAttachRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string data;
        
        public signAttachRequest()
        {
        }
        
        public signAttachRequest(string data)
        {
            this.data = data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="signAttachResponse", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class signAttachResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UACryptoSign.responseCrypt @return;
        
        public signAttachResponse()
        {
        }
        
        public signAttachResponse(UACryptoSign.responseCrypt @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="sign", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class signRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool attached;
        
        public signRequest()
        {
        }
        
        public signRequest(string data, bool attached)
        {
            this.data = data;
            this.attached = attached;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="signResponse", WrapperNamespace="http://cryptoauth/", IsWrapped=true)]
    internal partial class signResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://cryptoauth/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UACryptoSign.responseCrypt @return;
        
        public signResponse()
        {
        }
        
        public signResponse(UACryptoSign.responseCrypt @return)
        {
            this.@return = @return;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    internal interface ServiceChannel : UACryptoSign.Service, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    internal partial class ServiceClient : System.ServiceModel.ClientBase<UACryptoSign.Service>, UACryptoSign.Service
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.ServicePort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UACryptoSign.encryptResponse> UACryptoSign.Service.encryptAsync(UACryptoSign.encryptRequest request)
        {
            return base.Channel.encryptAsync(request);
        }
        
        public System.Threading.Tasks.Task<UACryptoSign.encryptResponse> encryptAsync(string data, string recipient)
        {
            UACryptoSign.encryptRequest inValue = new UACryptoSign.encryptRequest();
            inValue.data = data;
            inValue.recipient = recipient;
            return ((UACryptoSign.Service)(this)).encryptAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UACryptoSign.decryptResponse> UACryptoSign.Service.decryptAsync(UACryptoSign.decryptRequest request)
        {
            return base.Channel.decryptAsync(request);
        }
        
        public System.Threading.Tasks.Task<UACryptoSign.decryptResponse> decryptAsync(string data, string originator)
        {
            UACryptoSign.decryptRequest inValue = new UACryptoSign.decryptRequest();
            inValue.data = data;
            inValue.originator = originator;
            return ((UACryptoSign.Service)(this)).decryptAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UACryptoSign.verifyResponse> UACryptoSign.Service.verifyAsync(UACryptoSign.verifyRequest request)
        {
            return base.Channel.verifyAsync(request);
        }
        
        public System.Threading.Tasks.Task<UACryptoSign.verifyResponse> verifyAsync(string data, string dataExt, string cert)
        {
            UACryptoSign.verifyRequest inValue = new UACryptoSign.verifyRequest();
            inValue.data = data;
            inValue.dataExt = dataExt;
            inValue.cert = cert;
            return ((UACryptoSign.Service)(this)).verifyAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UACryptoSign.signDetachResponse> UACryptoSign.Service.signDetachAsync(UACryptoSign.signDetachRequest request)
        {
            return base.Channel.signDetachAsync(request);
        }
        
        public System.Threading.Tasks.Task<UACryptoSign.signDetachResponse> signDetachAsync(string data)
        {
            UACryptoSign.signDetachRequest inValue = new UACryptoSign.signDetachRequest();
            inValue.data = data;
            return ((UACryptoSign.Service)(this)).signDetachAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UACryptoSign.verifyDetachResponse> UACryptoSign.Service.verifyDetachAsync(UACryptoSign.verifyDetachRequest request)
        {
            return base.Channel.verifyDetachAsync(request);
        }
        
        public System.Threading.Tasks.Task<UACryptoSign.verifyDetachResponse> verifyDetachAsync(string data, string dataExt)
        {
            UACryptoSign.verifyDetachRequest inValue = new UACryptoSign.verifyDetachRequest();
            inValue.data = data;
            inValue.dataExt = dataExt;
            return ((UACryptoSign.Service)(this)).verifyDetachAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UACryptoSign.verifyAttachResponse> UACryptoSign.Service.verifyAttachAsync(UACryptoSign.verifyAttachRequest request)
        {
            return base.Channel.verifyAttachAsync(request);
        }
        
        public System.Threading.Tasks.Task<UACryptoSign.verifyAttachResponse> verifyAttachAsync(string data)
        {
            UACryptoSign.verifyAttachRequest inValue = new UACryptoSign.verifyAttachRequest();
            inValue.data = data;
            return ((UACryptoSign.Service)(this)).verifyAttachAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UACryptoSign.signAttachResponse> UACryptoSign.Service.signAttachAsync(UACryptoSign.signAttachRequest request)
        {
            return base.Channel.signAttachAsync(request);
        }
        
        public System.Threading.Tasks.Task<UACryptoSign.signAttachResponse> signAttachAsync(string data)
        {
            UACryptoSign.signAttachRequest inValue = new UACryptoSign.signAttachRequest();
            inValue.data = data;
            return ((UACryptoSign.Service)(this)).signAttachAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UACryptoSign.signResponse> UACryptoSign.Service.signAsync(UACryptoSign.signRequest request)
        {
            return base.Channel.signAsync(request);
        }
        
        public System.Threading.Tasks.Task<UACryptoSign.signResponse> signAsync(string data, bool attached)
        {
            UACryptoSign.signRequest inValue = new UACryptoSign.signRequest();
            inValue.data = data;
            inValue.attached = attached;
            return ((UACryptoSign.Service)(this)).signAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServicePort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServicePort))
            {
                return new System.ServiceModel.EndpointAddress("http://95.67.116.179:8080/Server/UACryptoSign");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.ServicePort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.ServicePort);
        }
        
        public enum EndpointConfiguration
        {
            
            ServicePort,
        }
    }
}
