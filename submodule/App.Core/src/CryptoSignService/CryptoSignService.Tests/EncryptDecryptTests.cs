using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace CryptoSignService.Tests
{
    public class EncryptDecryptTests
    {
        [Theory]
        [InlineData("Test string 123!")]
        [InlineData("Піявка")]
        [InlineData(" ")]
        [InlineData("\n")]
        public async Task<string> CanEncrypt(string data)
        {
            var service = new CertifiedElectronicSignatureService();
            var data64 = TestHelper.EncodeTo64(data);

            var cryptoResponse = await service.EncryptDataAsync(data64);

            Assert.True(cryptoResponse.Code == OperationCodes.SUCCESS);
            return cryptoResponse.Data;
        }

        [Theory]
        [InlineData("Test string 123!", "MIIEFgYJKoZIhvcNAQcDoIIEBzCCBAMCAQIxggOAoYIDfAIBA6CCAW4wggFqMIIBUDFUMFIGA1UECgxL0IbQvdGE0L7RgNC80LDRhtGW0LnQvdC+LdC00L7QstGW0LTQutC+0LLQuNC5INC00LXQv9Cw0YDRgtCw0LzQtdC90YIg0JTQpNChMV4wXAYDVQQLDFXQo9C/0YDQsNCy0LvRltC90L3RjyAo0YbQtdC90YLRgCkg0YHQtdGA0YLQuNGE0ZbQutCw0YbRltGXINC60LvRjtGH0ZbQsiDQhtCU0JQg0JTQpNChMWIwYAYDVQQDDFnQkNC60YDQtdC00LjRgtC+0LLQsNC90LjQuSDRhtC10L3RgtGAINGB0LXRgNGC0LjRhNGW0LrQsNGG0ZbRlyDQutC70Y7Rh9GW0LIg0IbQlNCUINCU0KTQoTEUMBIGA1UEBQwLVUEtMzkzODQ0NzYxCzAJBgNVBAYTAlVBMREwDwYDVQQHDAjQmtC40ZfQsgIUM7bLe/chuc4EAAAAi8MhAFRhTwChQgRA/g1NY7c3JM6o4AvlSZwhFe7aVYtcjHrqAig2L90V37N1Y4d1nz6wtn134Yu5qBTwiutWEbgiDtDAE5Gwln+caDAdBgoqhiQCAQEBAQMEMA8GCyqGJAIBAQEBAQEFBQAwggGgMIIBnDCCAWowggFQMVQwUgYDVQQKDEvQhtC90YTQvtGA0LzQsNGG0ZbQudC90L4t0LTQvtCy0ZbQtNC60L7QstC40Lkg0LTQtdC/0LDRgNGC0LDQvNC10L3RgiDQlNCk0KExXjBcBgNVBAsMVdCj0L/RgNCw0LLQu9GW0L3QvdGPICjRhtC10L3RgtGAKSDRgdC10YDRgtC40YTRltC60LDRhtGW0Zcg0LrQu9GO0YfRltCyINCG0JTQlCDQlNCk0KExYjBgBgNVBAMMWdCQ0LrRgNC10LTQuNGC0L7QstCw0L3QuNC5INGG0LXQvdGC0YAg0YHQtdGA0YLQuNGE0ZbQutCw0YbRltGXINC60LvRjtGH0ZbQsiDQhtCU0JQg0JTQpNChMRQwEgYDVQQFDAtVQS0zOTM4NDQ3NjELMAkGA1UEBhMCVUExETAPBgNVBAcMCNCa0LjRl9CyAhQztst79yG5zgQAAACLwyEAVGFPAAQshFZPmZ0yJuPkAw34CdRT1Ubz5eSkR/rOOSZeXyuRvcFnF/mRIIH/zIFaRlEwegYJKoZIhvcNAQcBMFsGCyqGJAIBAQEBAQEDMEwECLIBkxvC6LOdBECp1utF8TxwgoDElnsjH16t9ljrpMA3KR042WvwJcpOF/jpcg3GFbQ6KJdfC8Heo2Q4tWTqLBef0BI+bbj6xXkEgBByk3lG+0yU7xPFm1ikgzlo")]
        [InlineData("Піявка", "MIIEDAYJKoZIhvcNAQcDoIID/TCCA/kCAQIxggOAoYIDfAIBA6CCAW4wggFqMIIBUDFUMFIGA1UECgxL0IbQvdGE0L7RgNC80LDRhtGW0LnQvdC+LdC00L7QstGW0LTQutC+0LLQuNC5INC00LXQv9Cw0YDRgtCw0LzQtdC90YIg0JTQpNChMV4wXAYDVQQLDFXQo9C/0YDQsNCy0LvRltC90L3RjyAo0YbQtdC90YLRgCkg0YHQtdGA0YLQuNGE0ZbQutCw0YbRltGXINC60LvRjtGH0ZbQsiDQhtCU0JQg0JTQpNChMWIwYAYDVQQDDFnQkNC60YDQtdC00LjRgtC+0LLQsNC90LjQuSDRhtC10L3RgtGAINGB0LXRgNGC0LjRhNGW0LrQsNGG0ZbRlyDQutC70Y7Rh9GW0LIg0IbQlNCUINCU0KTQoTEUMBIGA1UEBQwLVUEtMzkzODQ0NzYxCzAJBgNVBAYTAlVBMREwDwYDVQQHDAjQmtC40ZfQsgIUM7bLe/chuc4EAAAAi8MhAFRhTwChQgRAWZQxW4xI5eo1lQvmTEUE+NF/RRtChI0/UUGFKswdhXvroKSSaQMKxxTZskxSMVR7p+21wLNLL+occXt99SKg2DAdBgoqhiQCAQEBAQMEMA8GCyqGJAIBAQEBAQEFBQAwggGgMIIBnDCCAWowggFQMVQwUgYDVQQKDEvQhtC90YTQvtGA0LzQsNGG0ZbQudC90L4t0LTQvtCy0ZbQtNC60L7QstC40Lkg0LTQtdC/0LDRgNGC0LDQvNC10L3RgiDQlNCk0KExXjBcBgNVBAsMVdCj0L/RgNCw0LLQu9GW0L3QvdGPICjRhtC10L3RgtGAKSDRgdC10YDRgtC40YTRltC60LDRhtGW0Zcg0LrQu9GO0YfRltCyINCG0JTQlCDQlNCk0KExYjBgBgNVBAMMWdCQ0LrRgNC10LTQuNGC0L7QstCw0L3QuNC5INGG0LXQvdGC0YAg0YHQtdGA0YLQuNGE0ZbQutCw0YbRltGXINC60LvRjtGH0ZbQsiDQhtCU0JQg0JTQpNChMRQwEgYDVQQFDAtVQS0zOTM4NDQ3NjELMAkGA1UEBhMCVUExETAPBgNVBAcMCNCa0LjRl9CyAhQztst79yG5zgQAAACLwyEAVGFPAAQs0qlyScDCh88Wp+loUn5byiYTKC9/yun4krBwOFwPqNWjwHTHCzfMidEWWeQwcAYJKoZIhvcNAQcBMFsGCyqGJAIBAQEBAQEDMEwECFS6aBkELqUYBECp1utF8TxwgoDElnsjH16t9ljrpMA3KR042WvwJcpOF/jpcg3GFbQ6KJdfC8Heo2Q4tWTqLBef0BI+bbj6xXkEgAYfFQqjelo=")]
        [InlineData(" ", "MIIEBwYJKoZIhvcNAQcDoIID+DCCA/QCAQIxggOAoYIDfAIBA6CCAW4wggFqMIIBUDFUMFIGA1UECgxL0IbQvdGE0L7RgNC80LDRhtGW0LnQvdC+LdC00L7QstGW0LTQutC+0LLQuNC5INC00LXQv9Cw0YDRgtCw0LzQtdC90YIg0JTQpNChMV4wXAYDVQQLDFXQo9C/0YDQsNCy0LvRltC90L3RjyAo0YbQtdC90YLRgCkg0YHQtdGA0YLQuNGE0ZbQutCw0YbRltGXINC60LvRjtGH0ZbQsiDQhtCU0JQg0JTQpNChMWIwYAYDVQQDDFnQkNC60YDQtdC00LjRgtC+0LLQsNC90LjQuSDRhtC10L3RgtGAINGB0LXRgNGC0LjRhNGW0LrQsNGG0ZbRlyDQutC70Y7Rh9GW0LIg0IbQlNCUINCU0KTQoTEUMBIGA1UEBQwLVUEtMzkzODQ0NzYxCzAJBgNVBAYTAlVBMREwDwYDVQQHDAjQmtC40ZfQsgIUM7bLe/chuc4EAAAAi8MhAFRhTwChQgRAUPg0C45Prm78Drr+sdUgAvixcsyWTAvUOkGoqAPmFkcS1yWTeEx16PaFZnXCQUPh3DDM9oCX3+9PUwk9pAzdcjAdBgoqhiQCAQEBAQMEMA8GCyqGJAIBAQEBAQEFBQAwggGgMIIBnDCCAWowggFQMVQwUgYDVQQKDEvQhtC90YTQvtGA0LzQsNGG0ZbQudC90L4t0LTQvtCy0ZbQtNC60L7QstC40Lkg0LTQtdC/0LDRgNGC0LDQvNC10L3RgiDQlNCk0KExXjBcBgNVBAsMVdCj0L/RgNCw0LLQu9GW0L3QvdGPICjRhtC10L3RgtGAKSDRgdC10YDRgtC40YTRltC60LDRhtGW0Zcg0LrQu9GO0YfRltCyINCG0JTQlCDQlNCk0KExYjBgBgNVBAMMWdCQ0LrRgNC10LTQuNGC0L7QstCw0L3QuNC5INGG0LXQvdGC0YAg0YHQtdGA0YLQuNGE0ZbQutCw0YbRltGXINC60LvRjtGH0ZbQsiDQhtCU0JQg0JTQpNChMRQwEgYDVQQFDAtVQS0zOTM4NDQ3NjELMAkGA1UEBhMCVUExETAPBgNVBAcMCNCa0LjRl9CyAhQztst79yG5zgQAAACLwyEAVGFPAAQs4NZMOf62UWN4HEqgnhy7ORbJdx+wKBKqyJkbfEVMOInLjgss1Teh4W+faMAwawYJKoZIhvcNAQcBMFsGCyqGJAIBAQEBAQEDMEwECC6rnrNP9mtxBECp1utF8TxwgoDElnsjH16t9ljrpMA3KR042WvwJcpOF/jpcg3GFbQ6KJdfC8Heo2Q4tWTqLBef0BI+bbj6xXkEgAHg")]
        [InlineData("\n", "MIIEBwYJKoZIhvcNAQcDoIID+DCCA/QCAQIxggOAoYIDfAIBA6CCAW4wggFqMIIBUDFUMFIGA1UECgxL0IbQvdGE0L7RgNC80LDRhtGW0LnQvdC+LdC00L7QstGW0LTQutC+0LLQuNC5INC00LXQv9Cw0YDRgtCw0LzQtdC90YIg0JTQpNChMV4wXAYDVQQLDFXQo9C/0YDQsNCy0LvRltC90L3RjyAo0YbQtdC90YLRgCkg0YHQtdGA0YLQuNGE0ZbQutCw0YbRltGXINC60LvRjtGH0ZbQsiDQhtCU0JQg0JTQpNChMWIwYAYDVQQDDFnQkNC60YDQtdC00LjRgtC+0LLQsNC90LjQuSDRhtC10L3RgtGAINGB0LXRgNGC0LjRhNGW0LrQsNGG0ZbRlyDQutC70Y7Rh9GW0LIg0IbQlNCUINCU0KTQoTEUMBIGA1UEBQwLVUEtMzkzODQ0NzYxCzAJBgNVBAYTAlVBMREwDwYDVQQHDAjQmtC40ZfQsgIUM7bLe/chuc4EAAAAi8MhAFRhTwChQgRANeOjJ2lQRPs5eMAzfRHfXT1x0NpDRHf536LmYxedU2w2E2GunUE+q5ycNP8jdKa1nxQ+p0r97prF62docZuCEjAdBgoqhiQCAQEBAQMEMA8GCyqGJAIBAQEBAQEFBQAwggGgMIIBnDCCAWowggFQMVQwUgYDVQQKDEvQhtC90YTQvtGA0LzQsNGG0ZbQudC90L4t0LTQvtCy0ZbQtNC60L7QstC40Lkg0LTQtdC/0LDRgNGC0LDQvNC10L3RgiDQlNCk0KExXjBcBgNVBAsMVdCj0L/RgNCw0LLQu9GW0L3QvdGPICjRhtC10L3RgtGAKSDRgdC10YDRgtC40YTRltC60LDRhtGW0Zcg0LrQu9GO0YfRltCyINCG0JTQlCDQlNCk0KExYjBgBgNVBAMMWdCQ0LrRgNC10LTQuNGC0L7QstCw0L3QuNC5INGG0LXQvdGC0YAg0YHQtdGA0YLQuNGE0ZbQutCw0YbRltGXINC60LvRjtGH0ZbQsiDQhtCU0JQg0JTQpNChMRQwEgYDVQQFDAtVQS0zOTM4NDQ3NjELMAkGA1UEBhMCVUExETAPBgNVBAcMCNCa0LjRl9CyAhQztst79yG5zgQAAACLwyEAVGFPAAQsYY8A6zqjo59fZm96BVLyq2snFeHJ6o0ujM75h9sE7GDIrijPCuHjgAbMzFUwawYJKoZIhvcNAQcBMFsGCyqGJAIBAQEBAQEDMEwECNSXjDX06t8eBECp1utF8TxwgoDElnsjH16t9ljrpMA3KR042WvwJcpOF/jpcg3GFbQ6KJdfC8Heo2Q4tWTqLBef0BI+bbj6xXkEgAEH")]
        public async void CanDecrypt(string originalData, string data)
        {
            var service = new CertifiedElectronicSignatureService();
            var data64 = TestHelper.EncodeTo64(originalData);
            // incoming parameter data is hardcoded by encrypting original data with current certificate that ends by February 2019
            // to avoid failing tests after that date, data reassigned by encrypting the data data now using existing CanEncrypt test
            data = await CanEncrypt(originalData);
            var cryptoResponse = await service.DecryptDataAsync(data);

            Assert.True(cryptoResponse.Code == OperationCodes.SUCCESS);
            Assert.Equal(data64, cryptoResponse.Data);
        }
    }
}
